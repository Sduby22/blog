[{"content":"Generally speaking, Quicksort can use two types of partition methods. The first of which partitions the array into 3 parts: (\u0026lt;=pivot), (pivot), (\u0026gt;pivot). And the latter partitions the array into 2 parts. I will introduce two coresponding algorithms: Hoare\u0026rsquo;s and Lomuto partition algorithm.\nLomuto Partition Algorithm Lomuto Partition Algorithm is very likely to be the partition algorithm that you learn from books. It partitions the array into three parts:\nFirst subset: less or equal than pivot Second subset: One element, equals pivot Third subset: greater than pivot The special thing is that after you\u0026rsquo;ve done the partitioning, the single element in the second subset (the pivot) is guaranteed to be located at the correct order position. (Why?)\nint partition(int* vec, int l, int r) { int k = l+1; int pivot_pos = l + rand() % (r-l); int pivot = vec[pivot_pos]; swap(vec[l], vec[pivot_pos]); for (int i = l+1; i != r; i++) { if (vec[i] \u0026lt;= pivot) { swap(vec[k++], vec[i]); } } swap(vec[k-1], vec[l]); return k-1; } When use Lomuto Partition Algorithm with quicksort, make sure you don\u0026rsquo;t touch the middle(pivot) element, because it\u0026rsquo;s already been placed at the corrent position.\nvoid Qsort_r(int* vec, int l, int r) { if (l+1 \u0026gt;= r) return; auto mid = partition(vec, l, r); Qsort_r(vec, l, mid); Qsort_r(vec, mid+1, r); // dont touch the mid(pivot) because it\u0026#39;s already placed at the corrent pos! } Hoare\u0026rsquo;s Partition Algorithm Hoare\u0026rsquo;s Partition Algorithm basically partitions the array into two parts:\nThe first \\([left, mid)\\) subset is less or equal to pivot The second \\([mid, right)\\) subset is greater or equal to pivot Think: If elements with the same value as the pivot(let\u0026rsquo;s say \\(p\\)) appear multiple times in the array, does it mean that \\(p\\) will appear in both two subsets? If so, can we still use it in quicksort algorithm? Why? Does Lomuto Algorithm have this problem?\nint partition(int* vec, int l, int r) { int pivot_pos = l + rand() % (r-l); int pivot = vec[pivot_pos]; int i = l, j = r-1; while(i \u0026lt;= j) { while(vec[i] \u0026lt; pivot) i++; while(vec[j] \u0026gt; pivot) j--; if (i \u0026lt;= j) { swap(vec[i], vec[j]); i++; j--; } } return i; } When use Hoare\u0026rsquo;s Partition Algorithm with quicksort, make sure you do qsort recursively to two continuous subsets.\nvoid Qsort_r(int* vec, int l, int r) { if (l+1 \u0026gt;= r) return; auto mid = partition(vec, l, r); Qsort_r(vec, l, mid); Qsort_r(vec, mid, r); } Think: If you pick a pivot in advance, partition the rest \\(n-1\\) elements with Hoare\u0026rsquo;s method, and finally swap the pivot back to mid place, then use the same Qsort_r function as the Lomuto method(don\u0026rsquo;t touch mid). Will it yield the right result? Why not and which step leads to problem?\n","permalink":"https://chocole.top/posts/partition-methods-of-quicksort/","summary":"Generally speaking, Quicksort can use two types of partition methods. The first of which partitions the array into 3 parts: =(\u0026lt;=pivot), (pivot), (\u0026gt;pivot)=. And the latter partitions the array into 2 parts. I will introduce two coresponding algorithms: Hoare\u0026rsquo;s and Lomuto partition algorithm.","title":"Partition Methods of Quicksort"},{"content":"Introduction In this post, we use:\nHugo + Markdown for static blog site building. Github Pages for Deployment Cloudflare for a CDN acceleration (needs a domain) Please take a look at the TOC for steps of configuration.\nBuilding the Static Site with Hugo Hugo is a static website generator. In a nutshell, it parses your markdown file, add some themes/styles to it, and compiles to a pack of html/css/js files for deployment.\nGetting Started with Hugo You can follow this guide to set up hugo locally.\nMaybe Change your Config to YAML? (Optional) Hugo uses config.yoml or config.yaml for config file. IMO I think yaml is more readable than toml, so I\u0026rsquo;d like to convert the auto-generated toml file to config.yaml. You can also do that with some random online converter found on Google.\nBecause I use yaml, all the config examples in this posts is in yaml. If you want to use toml, don\u0026rsquo;t just copy paste, do the convertion yourself.\nPick your Favorite Theme (Optional) Complete List | Hugo Themes\nModify the Config open config.yaml, there are some important fields to modify.\nbaseURL: \u0026#39;https://chocole.top/\u0026#39; # Change this buildDrafts: true title: \u0026#34;Random Notes\u0026#34; Params: env: production In config file, you also set up some theme specific settings, like TOC toggles. Go to your theme repo for detail.\nWe\u0026rsquo;ll go back to baseURL option later.\nTry Building the Site Locally Run hugo server in your root dir to test if everything goes well.\nDeploy Your Site to Github Pages How does Github Pages work? In a nutshell, it pulls your repo and hosts the files in it. So if you create a repo and push all the html/css/js files generated by hugo, then your github pages is set up.\nBut for convenience sake, we can invoke Github Action for automatic building \u0026amp; deploy. The blogging flow truns into:\nWrite posts in md and put them into contents/posts folder in your hugo dir. Commit and push them to master branch of the remote github repo. Pushing to master branch triggers the Github Action. a worker machine runs hugo to build md to html, then push the generated files to a new branch gh-pages. Github Pages can now host the site with the files in branch gh-pages. Create a Github Repo Create your blog repo and push everything except the public folder (if exists) in it. The public folder contains the generated html file and we actually don\u0026rsquo;t need them and they can be safely deleted.\nSet up Github Action In your repo root dir, create .github/workflows/gh-pages.yml, paste this:\nname: GitHub Pages on: push: branches: - master # Change this to your branch name (master/main) pull_request: jobs: deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.101.0\u0026#39; # You can set your hugo version, check with `hugo version` extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/master\u0026#39; }} # Change this to master/main with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public cname: chocole.top # If you dont want to use a custom domain, delete this line. There\u0026rsquo;re some important settings so make sure you read the comment.\nTest the Action Write some new random md files and push to your master branch, you can see if the github action succeeds in the repo page. If everything goes well, a new branch called gh-pages should appear, in which contains the generated html/css/js files.\nEnable Github Pages in Repo Settings. Enable Github Pages by setting the page branch to gh-pages. You should see your custom domain if you set the cname field in step Set up Github Action\nIf you choose not to use a custom domain, your site show now be accessible via that URL.\nUse Cloudflare to Accelerate your Site Create a new website in cf dashboard Create a new website in cf dashboard and select the free plan.\nConfigure the DNS server on your Domain Provider Side If your domain is not from cf, then you have to do this. Follow the instructions on the cf \u0026ldquo;Overview\u0026rdquo; page.\nAdd CNAME DNS records change the domain names to your domains. Always Use HTTPS cf Dashboard \u0026ndash; SSL/TLS \u0026ndash; Edge Certificates \u0026ndash; Always Use HTTPS\nConclusion For CF users you have to wait for DNS server updates and Edge Certificates Activation. In 24 hours you should have access to you new site.\nFAQ Q: The website is accessible, but the layout is broken.\nA: Check baseURL in Modify the Config\n","permalink":"https://chocole.top/posts/todo-build-a-website-with-hugo+github-pages+cloudflare/","summary":"Build a website with Hugo+Github Pages+Cloudflare","title":"Build a website with Hugo \u0026 Github Pages \u0026 Cloudflare"},{"content":"Todo List Stage 1 A frame displaying our game 10x20 game board All 7 kinds of pieces: I, J, L, O, S, T, Z Spawn a piece Move the pieces left, right, and down Detect collisions Freeze the pieces and spawn new ones Stage 2 ","permalink":"https://chocole.top/posts/tetris/","summary":"Todo List Stage 1 A frame displaying our game 10x20 game board All 7 kinds of pieces: I, J, L, O, S, T, Z Spawn a piece Move the pieces left, right, and down Detect collisions Freeze the pieces and spawn new ones Stage 2 ","title":"Build a Modern Tetris Game With Bevy and Rust"},{"content":"Hello World!\n你好，世界！\n","permalink":"https://chocole.top/posts/hello-world/","summary":"Hello World!!","title":"Hello World"}]